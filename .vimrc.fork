
"==========================================
" FileEncode Settings 文件编码,格式
"==========================================
" 自动判断编码时，依次尝试以下编码：
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set helplang=cn
"set langmenu=zh_CN.UTF-8
"set enc=2byte-gb18030
" 下面这句只影响普通模式 (非图形界面) 下的 Vim。
set termencoding=utf-8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" 如遇Unicode值大于255的文本，不必等到空格再折行。
set formatoptions+=m
" 合并两行中文时，不在中间加空格：
set formatoptions+=B

"设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制
"好处：误删什么的，如果以前屏幕打开，可以找回
set t_ti= t_te=

" 00x增减数字时使用十进制
set nrformats=

"set default color schema    
colorscheme molokai

" ================ 行号 ============================
" 相对行号      行号变成相对，可以用 nj  nk   进行跳转 5j   5k 上下跳5行
if v:version >= 703
set relativenumber number
au FocusLost * :set norelativenumber number
au FocusGained * :set relativenumber
" 插入模式下用绝对行号, 普通模式下用相对
autocmd InsertEnter * :set norelativenumber number
autocmd InsertLeave * :set relativenumber
function! NumberToggle()
    if(&relativenumber == 1)
        set norelativenumber number
    else
        set relativenumber
    endif
endfunc
nnoremap <leader>en: call NumberToggle()<cr>

""为方便复制，用于开启/关闭行号显示:
function! HideNumber()
  if(&relativenumber == &number)
    set relativenumber! number!
  elseif(&number)
    set number!
  else
    set relativenumber!
  endif
  set number?
endfunc
nnoremap <leader>wn :call HideNumber()<CR>
endif

nnoremap <leader>el :set list! list?<CR>
nnoremap <leader>ew :set wrap! wrap?<CR>
" ================ Search format ============================
" 进入搜索Use sane regexes"
nnoremap / /\v
vnoremap / /\v

"Keep search pattern at the center of the screen."
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz


"Switch line down/up key for wrapper line, default is overwrite 
nnoremap gj j
nnoremap gk k

" toggle wrap mode, similar to [ow/]ow in vim-unimpaired 
:nmap <leader>ow :setlocal wrap!<CR> :setlocal wrap? <CR>

"离开插入模式后自动关闭预览窗口
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
"回车即选中当前项
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"

"上下左右键的行为 会显示其他信息
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

" disable store option for scrollbind setting problem
" restore_view.vim {
	if isdirectory(expand("~/.vim/bundle/restore_view.vim/"))
		set viewoptions=cursor,folds,slash,unix 
	endif
" }

" vim-airline {
	if isdirectory(expand("~/.vim/bundle/vim-airline/"))
		if !exists('g:airline_symbols')
    		let g:airline_symbols = {}
		endif
		let g:airline_symbols.linenr = '¶'	
		let g:airline_symbols.branch = '⎇'
    endif
" }

" cscope_dynamic {
    if isdirectory(expand("~/.vim/bundle/cscope_dynamic"))
        let g:statusline_cscope_flag = ""
        set statusline=[%n]%<%f\ %h%m%r\ %=\
        set statusline+=%(\ [%{g:statusline_cscope_flag}]\ \ \ %)
        set statusline+=%-14.(%l,%c%V%)\ %P
        
        function! Cscope_dynamic_update_hook(updating)
            if a:updating
                let g:statusline_cscope_flag = "C"
            else
                let g:statusline_cscope_flag = ""
            endif
            execute "redrawstatus!"
        endfunction
        call Cscope_dynamic_update_hook(0)

        nmap <F11> <Plug>CscopeDBInit
        
        setlocal noautochdir 
        "set csto=0
        "set cst				    "search both of scope and tag file
        "set nocsverb                            "no verbose
        "set cscopequickfix=s-,c-,d-,i-,t-,e-    "output to QuickFix window
        "Change cscope output to quickfix window or not.
function! s:cscopeChangeOutput()
    if &cscopequickfix != 's+,c+,d+,i+,t+,e+'
        set cscopequickfix=s+,c+,d+,i+,t+,e+
        echo "cscope Quickfix mode is ".&cscopequickfix
    elseif &cscopequickfix == 's+,c+,d+,i+,t+,e+'
        set cscopequickfix=""
        echo "cscope Quickfix mode is Off."
    endif
endfunction
        nmap <silent><leader>fo :call <SID>cscopeChangeOutput()<CR>  " toggle output
        
        nmap <leader>fs :cs find s <C-R>=expand("<cword>")<CR><CR>	
    	nmap <leader>fg :cs find g <C-R>=expand("<cword>")<CR><CR>	
    	nmap <leader>fc :cs find c <C-R>=expand("<cword>")<CR><CR>	
    	nmap <leader>ft :cs find t <C-R>=expand("<cword>")<CR><CR>	
    	nmap <leader>fe :cs find e <C-R>=expand("<cword>")<CR><CR>	
    	nmap <leader>ff :cs find f <C-R>=expand("<cfile>")<CR><CR>	
    	nmap <leader>fi :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    	nmap <leader>fd :cs find d <C-R>=expand("<cword>")<CR><CR>
    
    endif
" }

" NerdTree {
    if isdirectory(expand("~/.vim/bundle/nerdtree"))
        let NERDTreeIgnore+=[ '\.pyo$', '\.obj$', '\.o$', '\.so$']
    endif
" }

" SrcExpl {
	if isdirectory(expand("~/.vim/bundle/SrcExpl/"))
		nmap <leader>se :SrcExplToggle<CR> 

		let g:SrcExpl_winHeight = 8 
		let g:SrcExpl_refreshTime = 100 
		let g:SrcExpl_searchLocalDef = 1 
		let g:SrcExpl_isUpdateTags = 0 

		let g:SrcExpl_jumpKey = "<ENTER>" 
		let g:SrcExpl_gobackKey = "<SPACE>" 
		let g:SrcExpl_updateTagsKey = "<F11>u" 
		let g:SrcExpl_prevDefKey = "<F11>b" 
		let g:SrcExpl_nextDefKey = "<F11>f" 
		"
		" // In order to avoid conflicts, the Source Explorer should know what plugins " 
		" // except itself are using buffers. And you need add their buffer names into " 
		" // below listaccording to the command ":buffers!"                            " 
		 let g:SrcExpl_pluginList = [ 
				 \ "__Tag_List__", 
				 \ "__Tagbar__", 
				 \ "NERD_tree_",
				 \ "Quickfix List" 
			 \ ] 
		"                                                                              " 
		" // Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to " 
		" //  create/update a tags file                                                " 
		let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ." 
	endif
" }

" YankRing{
    if isdirectory(expand("~/.vim/bundle/YankRing.vim"))
        let yankring_min_element_length=4
        let g:yankring_history_file = '.yankring-history'
        nnoremap ,yr :YRShow<CR>
    endif
" }

" vim-mark {
	if isdirectory(expand("~/.vim/bundle/vim-mark/"))
		"Unmap '<leader>/' because of '<leader>/' key use in SPF13 conflict with vim-mark plugins
		nunmap <silent> <leader>/
		"remove the default overriding of * and #, use: 
    	nmap <Plug>IgnoreMarkSearchNext <Plug>MarkSearchNext 
    	nmap <Plug>IgnoreMarkSearchPrev <Plug>MarkSearchPrev 
	endif
" }

"YouCompleteMe{
	if count(g:spf13_bundle_groups, 'youcompleteme') 
		if !empty(glob("~/.ycm_extra_conf.py"))
			let g:ycm_global_ycm_extra_conf = "~/.ycm_extra_conf.py"
		elseif !empty(glob("~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"))
    		let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
		endif   
        let g:ycm_min_num_of_chars_for_completion = 1
        let g:ycm_auto_trigger = 1
		" 跳转到定义处, 分屏打开
		let g:ycm_goto_buffer_command = 'horizontal-split'
		" nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
		nnoremap <leader>jt :YcmCompleter GoTo<CR>
		nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
		nnoremap <leader>js :YcmCompleter GoToDeclaration<CR>
		
	endif
"}

" if this not work ,make sure .viminfo is writable for you
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"Map ; to : and save a million keystrokes
" ex mode commands made easy 用于快速进入命令行
nnoremap ; :
" Make 0 go to the first character rather than the beginning
" of the line. When we're programming, we're almost always
" interested in working with text rather than empty space. If
" you want the traditional beginning of line, use ^
nnoremap 0 ^
nnoremap ^ 0

" Quickly edit/reload the vimrc file
nnoremap <silent> <leader>ev :e  $MYVIMRC<CR>
nnoremap <silent> <leader>sv :so $MYVIMRC<CR>
autocmd! bufwritepost vimrc source %
autocmd! bufwritepost _vimrc source % " vimrc文件修改之后自动加载。 windows。
autocmd! bufwritepost .vimrc source % " vimrc文件修改之后自动加载。 linux。

if !WINDOWS()
	" w!! to sudo & write a file
	cmap w!! w !sudo tee >/dev/null %
endif

" 定义函数AutoSetFileHead，自动插入文件头
autocmd BufNewFile *.sh,*.py exec ":call AutoSetFileHead()"
function! AutoSetFileHead()
    "如果文件类型为.sh文件
    if &filetype == 'sh'
        call setline(1, "\#!/bin/bash")
    endif

    "如果文件类型为python
    if &filetype == 'python'
        call setline(1, "\#!/usr/bin/env python")
        call append(1, "\# encoding: utf-8")
    endif

    normal G
    normal o
    normal o
endfunc

" F10 to run python script
nnoremap <buffer> <F10> :exec '!python' shellescape(@%, 1)<cr>

"==========================================
" Search in visual model
"==========================================
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.' . a:extra_filter)
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>
" When you press <leader>vr you can search and replace the selected text
vnoremap <silent> <leader>vr :call VisualSelection('replace', '')<CR>

"==========================================
" Automatically jump to a file at the correct line number
"==========================================
" i.e. if your cursor is over /some/path.rb:50 then using 'gf' on it will take
" you to that line

" use ,gf to go to file in a vertical split
nnoremap <silent> <leader>gf   :vertical botright wincmd f<CR>

" use to jump to tag definition in a vertical split, similar to horizon split: <C-w>]
nnoremap <buffer> <leader>w] :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
nnoremap <silent> <leader>t] :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
"==========================================
" quickfix-search
"==========================================
" Stolen from Steve Losh vimrc: https://bitbucket.org/sjl/dotfiles/src/tip/vim/.vimrc
" Open a Quickfix window for the last search. similar to query search history: q/
nnoremap <silent> <leader>q/ :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>

" Ag/Ack for the last search.
nnoremap <silent> <leader>qa/ :execute "Ack! '" . substitute(substitute(substitute(@/, "\\\\<", "\\\\b", ""), "\\\\>", "\\\\b", ""), "\\\\v", "", "") . "'"<CR>
"==========================================
" Use Q to intelligently close a window
"==========================================
" (if there are multiple windows into the same buffer)
" or kill the buffer entirely if it's the last window looking into that buffer
function! CloseWindowOrKillBuffer()
    let number_of_windows_to_this_buffer = len(filter(range(1, winnr('$')), "winbufnr(v:val) == bufnr('%')"))

    " We should never bdelete a nerd tree
    if matchstr(expand("%"), 'NERD') == 'NERD'
        wincmd c
        return
    endif

    if number_of_windows_to_this_buffer > 1
        wincmd c
    else
        bdelete
    endif
endfunction

nnoremap <silent> Q :call CloseWindowOrKillBuffer()<CR>

"==========================================
" better tracking my usage of the <leader> namespace for my key mappings
"==========================================
function! ListLeaders()
    silent! redir @a
    silent! nmap <LEADER>
    silent! redir END
    silent! new
    silent! put! a
    silent! g/^s*$/d
    silent! %s/^.*,/,/
    silent! normal ggVG
    silent! sort
    silent! let lines = getline(1,"$")
endfunction
nnoremap <silent> <leader>ll :call ListLeaders()<CR> 
