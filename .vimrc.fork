" fix location window report: E924: Current window was closed
let g:syntastic_auto_loc_list = 3

"set default color schema
colorscheme molokai

" toggle wrap mode, similar to [ow/]ow in plugin vim-unimpaired
:nmap <leader>ow :setlocal wrap!<CR> :setlocal wrap? <CR>

" disable store option for scrollbind setting problem
" restore_view.vim {
	if isdirectory(expand("~/.vim/bundle/restore_view.vim/"))
		set viewoptions=cursor,folds,slash,unix
	endif
" }
" indentLine {
	if isdirectory(expand("~/.vim/bundle/indentLine/"))
        let g:indentLine_color_term = 239
        "let g:indentLine_color_gui = '#A4E57E'
        "let g:indentLine_color_tty_light = 7 " (default: 4)
        "let g:indentLine_color_dark = 1 " (default: 2)
        "let g:indentLine_char = '¦'
    endif
" }
" vim-airline {
	if isdirectory(expand("~/.vim/bundle/vim-airline/"))

		" do not display trailing/mixed-indent/mixed-indent-file
		let g:airline#extensions#whitespace#enabled = 1
		let g:airline#extensions#whitespace#trailing_format = 'E[%s]'
		let g:airline#extensions#whitespace#mixed_indent_format = 'B[%s]'
		let g:airline#extensions#whitespace#long_format = 'L[%s]'
		let g:airline#extensions#whitespace#mixed_indent_file_format = 'F[%s]'

		if !exists('g:airline_symbols')
    		let g:airline_symbols = {}
		endif
        " unicode symbols
        "let g:airline_left_sep = '▶'
        let g:airline_left_sep = '»'
        "let g:airline_right_sep = '◀'
        let g:airline_right_sep = '«'
        "let g:airline_symbols.linenr = '␊'
        "let g:airline_symbols.linenr = '¶'
        let g:airline_symbols.linenr = '␤'
        let g:airline_symbols.branch = '⎇'
        "let g:airline_symbols.paste = 'ρ'
        let g:airline_symbols.paste = 'Þ'
        "let g:airline_symbols.paste = '∥'
        let g:airline_symbols.whitespace = 'Ξ'
    endif
" }
" cscope {
	if isdirectory(expand("~/.vim/bundle/gutentags_plus"))
		" enable gtags module
		let g:gutentags_modules = ['ctags', 'gtags_cscope']

		" config project root markers.
		let g:gutentags_project_root = ['.root']

		" generate datebases in my cache directory, prevent gtags files polluting my project
		let g:gutentags_cache_dir = expand('~/.cache/tags')

		" change focus to quickfix window after search (optional).
		let g:gutentags_plus_switch = 1

		" disable the default keymaps
		let g:gutentags_plus_nomap = 1

		noremap <silent> <leader>hs :GscopeFind s <C-R><C-W><cr>
		noremap <silent> <leader>hg :GscopeFind g <C-R><C-W><cr>
		noremap <silent> <leader>hc :GscopeFind c <C-R><C-W><cr>
		noremap <silent> <leader>ht :GscopeFind t <C-R><C-W><cr>
		noremap <silent> <leader>he :GscopeFind e <C-R><C-W><cr>
		noremap <silent> <leader>hf :GscopeFind f <C-R>=expand("<cfile>")<cr><cr>
		noremap <silent> <leader>hi :GscopeFind i <C-R>=expand("<cfile>")<cr><cr>
		noremap <silent> <leader>hd :GscopeFind d <C-R><C-W><cr>
		noremap <silent> <leader>ha :GscopeFind a <C-R><C-W><cr>

		" debug error
		"let g:gutentags_define_advanced_commands = 1

	endif

	if isdirectory(expand("~/.vim/bundle/cscope.vim"))
        let g:cscope_silent = 1
        nnoremap <leader>fa :call CscopeFindInteractive(expand('<cword>'))<CR>
        nnoremap <leader>l :call ToggleLocationList()<CR>

		nnoremap  <leader>fs :call CscopeFind('s', expand('<cword>'))<CR>
		nnoremap  <leader>fg :call CscopeFind('g', expand('<cword>'))<CR>
		nnoremap  <leader>fd :call CscopeFind('d', expand('<cword>'))<CR>
		nnoremap  <leader>fc :call CscopeFind('c', expand('<cword>'))<CR>
		nnoremap  <leader>ft :call CscopeFind('t', expand('<cword>'))<CR>
		nnoremap  <leader>fe :call CscopeFind('e', expand('<cword>'))<CR>
		nnoremap  <leader>ff :call CscopeFind('f', expand('<cword>'))<CR>
		nnoremap  <leader>fi :call CscopeFind('i', expand('<cword>'))<CR>
	endif
" }

" cscope_dynamic {
    if isdirectory(expand("~/.vim/bundle/cscope_dynamic"))
        let g:statusline_cscope_flag = ""
        set statusline=[%n]%<%f\ %h%m%r\ %=\
        set statusline+=%(\ [%{g:statusline_cscope_flag}]\ \ \ %)
        set statusline+=%-14.(%l,%c%V%)\ %P

        function! Cscope_dynamic_update_hook(updating)
            if a:updating
                let g:statusline_cscope_flag = "C"
            else
                let g:statusline_cscope_flag = ""
            endif
            execute "redrawstatus!"
        endfunction
        call Cscope_dynamic_update_hook(0)

        nmap <F11> <Plug>CscopeDBInit

        setlocal noautochdir
        "set csto=0
        "set cst				    "search both of scope and tag file
        "set nocsverb                            "no verbose
        "set cscopequickfix=s-,c-,d-,i-,t-,e-    "output to QuickFix window
        "Change cscope output to quickfix window or not.

		function! s:cscopeChangeOutput()
		    if &cscopequickfix != 's+,c+,d+,i+,t+,e+'
        		set cscopequickfix=s+,c+,d+,i+,t+,e+
		        echo "cscope Quickfix mode is ".&cscopequickfix
		    elseif &cscopequickfix == 's+,c+,d+,i+,t+,e+'
		    	set cscopequickfix=""
		        echo "cscope Quickfix mode is Off."
		    endif
		endfunction
        nmap <silent><leader>fo :call <SID>cscopeChangeOutput()<CR>  " toggle output

        nmap <leader>fs :cs find s <C-R>=expand("<cword>")<CR><CR>
    	nmap <leader>fg :cs find g <C-R>=expand("<cword>")<CR><CR>
    	nmap <leader>fc :cs find c <C-R>=expand("<cword>")<CR><CR>
    	nmap <leader>ft :cs find t <C-R>=expand("<cword>")<CR><CR>
    	nmap <leader>fe :cs find e <C-R>=expand("<cword>")<CR><CR>
    	nmap <leader>ff :cs find f <C-R>=expand("<cfile>")<CR><CR>
    	nmap <leader>fi :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    	nmap <leader>fd :cs find d <C-R>=expand("<cword>")<CR><CR>

    endif
" }
" vim-easytags {
    if isdirectory(expand("~/.vim/bundle/vim-easytags"))
        let g:easytags_dynamic_files = 1
        let g:easytags_file = '~/.vim/tags'
        let g:easytags_async = 1
        let g:easytags_autorecurse = 1
        let g:easytags_include_members = 1
        let g:easytags_resolve_links = 0
	let g:easytags_auto_update = 0
	let g:easytags_auto_highlight = 0
        let g:easytags_events = ['BufWritePost']
	let g:easytags_on_cursorhold = 0
    endif
" }
" Defx {
	if isdirectory(expand("~/.vim/bundle/defx.nvim"))
		map <leader>e  :Defx -split=vertical -winwidth=50 -direction=topleft <CR>
		map <leader>ef :Defx `expand('%:p:h')` -search=`expand('%:p')` <CR>
		map <leader>eg :Defx -columns=git:mark:filename:type <CR>

		autocmd FileType defx call s:defx_my_settings()
		function! s:defx_my_settings() abort
		" Define mappings
		nnoremap <silent><buffer><expr> <CR>
		\ defx#do_action('open')
		nnoremap <silent><buffer><expr> c
		\ defx#do_action('copy')
		nnoremap <silent><buffer><expr> m
		\ defx#do_action('move')
		nnoremap <silent><buffer><expr> p
		\ defx#do_action('paste')
		nnoremap <silent><buffer><expr> l
		\ defx#do_action('open')
		nnoremap <silent><buffer><expr> E
		\ defx#do_action('open', 'vsplit')
		nnoremap <silent><buffer><expr> P
		\ defx#do_action('open', 'pedit')
		nnoremap <silent><buffer><expr> o
		\ defx#do_action('open_or_close_tree')
		nnoremap <silent><buffer><expr> K
		\ defx#do_action('new_directory')
		nnoremap <silent><buffer><expr> N
		\ defx#do_action('new_file')
		nnoremap <silent><buffer><expr> M
		\ defx#do_action('new_multiple_files')
		nnoremap <silent><buffer><expr> C
		\ defx#do_action('toggle_columns',
		\                'mark:indent:icon:filename:type:size:time')
		nnoremap <silent><buffer><expr> S
		\ defx#do_action('toggle_sort', 'time')
		nnoremap <silent><buffer><expr> d
		\ defx#do_action('remove')
		nnoremap <silent><buffer><expr> r
		\ defx#do_action('rename')
		nnoremap <silent><buffer><expr> !
		\ defx#do_action('execute_command')
		nnoremap <silent><buffer><expr> x
		\ defx#do_action('execute_system')
		nnoremap <silent><buffer><expr> yy
		\ defx#do_action('yank_path')
		nnoremap <silent><buffer><expr> .
		\ defx#do_action('toggle_ignored_files')
		nnoremap <silent><buffer><expr> ;
		\ defx#do_action('repeat')
		nnoremap <silent><buffer><expr> h
		\ defx#do_action('cd', ['..'])
		nnoremap <silent><buffer><expr> ~
		\ defx#do_action('cd')
		nnoremap <silent><buffer><expr> q
		\ defx#do_action('quit')
		nnoremap <silent><buffer><expr> <Space>
		\ defx#do_action('toggle_select') . 'j'
		nnoremap <silent><buffer><expr> *
		\ defx#do_action('toggle_select_all')
		nnoremap <silent><buffer><expr> j
		\ line('.') == line('$') ? 'gg' : 'j'
		nnoremap <silent><buffer><expr> k
		\ line('.') == 1 ? 'G' : 'k'
		nnoremap <silent><buffer><expr> <C-l>
		\ defx#do_action('redraw')
		nnoremap <silent><buffer><expr> <C-g>
		\ defx#do_action('print')
		nnoremap <silent><buffer><expr> cd
		\ defx#do_action('change_vim_cwd')
		endfunction

" Defx git
		if isdirectory(expand("~/.vim/bundle/defx-git"))
			hi Defx_git_Untracked guifg=#FF0000
		endif
	
		if isdirectory(expand("~/.vim/bundle/defx-icons"))
			let g:defx_icons_enable_syntax_highlight = 1
		endif
" }
" NerdTree {
	elseif isdirectory(expand("~/.vim/bundle/nerdtree"))
        let NERDTreeIgnore+=[ '\.pyo$', '\.obj$', '\.o$', '\.so$']
    endif
" }

" editorconfig-vim {
	if isdirectory(expand("~/.vim/bundle/editorconfig-vim/"))
		" ensure that this plugin works well with fugitive and not load remote files
		let g:EditorConfig_exclude_patterns = ['fugitive://.\*', 'scp://.\*']
		"let g:EditorConfig_disable_rules = ['trim_trailing_whitespace']
	endif
" }
" SrcExpl {
	if isdirectory(expand("~/.vim/bundle/SrcExpl/"))
		nmap <leader>se :SrcExplToggle<CR>

		let g:SrcExpl_winHeight = 8
		let g:SrcExpl_refreshTime = 100
		let g:SrcExpl_searchLocalDef = 1
		let g:SrcExpl_isUpdateTags = 0

		let g:SrcExpl_jumpKey = "<ENTER>"
		let g:SrcExpl_gobackKey = "<SPACE>"
		let g:SrcExpl_updateTagsKey = "<F11>u"
		let g:SrcExpl_prevDefKey = "<F11>b"
		let g:SrcExpl_nextDefKey = "<F11>f"
		"
		" // In order to avoid conflicts, the Source Explorer should know what plugins "
		" // except itself are using buffers. And you need add their buffer names into "
		" // below listaccording to the command ":buffers!"                            "
		 let g:SrcExpl_pluginList = [
				 \ "__Tag_List__",
				 \ "__Tagbar__",
				 \ "NERD_tree_",
				 \ "Quickfix List"
			 \ ]
		"                                                                              "
		" // Use 'Exuberant Ctags' with '--sort=foldcase -R .' or '-L cscope.files' to "
		" //  create/update a tags file                                                "
		let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."
	endif
" }

" Because CtrlP, YankRing and vim-multiple-cursors use Ctrl+P, we need to remap
" YankRing{
    if isdirectory(expand("~/.vim/bundle/YankRing.vim"))
        let yankring_min_element_length=4
        let g:yankring_history_file = '.yankring-history'
        nnoremap <leader>yr :YRShow<CR>
    endif
" }

" fzf{
    if isdirectory(expand("~/.vim/bundle/fzf.vim"))
        nnoremap <leader>fl :Files   <CR>
        nnoremap <leader>bl :Buffers <CR>
        nnoremap <leader>hl :Helptags<CR>
        nnoremap <leader>ms :Maps    <CR>
        nnoremap <leader>ag :execute 'Ag ' . expand('<cword>')<Cr>
" }
" CtrlP{
	elseif isdirectory(expand("~/.vim/bundle/ctrlp.vim"))
        let g:ctrlp_by_filename = 1
        nnoremap <leader>fl :CtrlP<CR>
        nnoremap <leader>bl :CtrlPBuffer<CR>
		" CtrlP-funky{
			if isdirectory(expand("~/.vim/bundle/ctrlp-funky/"))
				nnoremap <Leader>fu :CtrlPFunky<Cr>
				nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
			endif
		" }
    endif
" }
" vim-mark {
	if isdirectory(expand("~/.vim/bundle/vim-mark/"))
		"Unmap '<leader>/' because of '<leader>/' key use in SPF13 conflict with vim-mark plugins
		nunmap <silent> <leader>/
		"remove the default overriding of * and #, use:
    	nmap <Plug>IgnoreMarkSearchNext <Plug>MarkSearchNext
    	nmap <Plug>IgnoreMarkSearchPrev <Plug>MarkSearchPrev
	endif
" }

"YouCompleteMe{
	if count(g:spf13_bundle_groups, 'youcompleteme')
		if !empty(glob("~/.ycm_extra_conf.py"))
			let g:ycm_global_ycm_extra_conf = "~/.ycm_extra_conf.py"
		elseif !empty(glob("~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"))
    		let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
		endif
        let g:ycm_confirm_extra_conf=0
        let g:ycm_min_num_of_chars_for_completion = 1
        let g:ycm_auto_trigger = 1
		" 跳转到定义处, 分屏打开
		let g:ycm_goto_buffer_command = 'horizontal-split'
        " speedup: YCM + Syntastic with gcc
        "g:ycm_register_as_syntastic_checker = 0

		nnoremap <leader>jw :YcmCompleter GoTo<CR>
		nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
		nnoremap <leader>js :YcmCompleter GoToDeclaration<CR>
		nnoremap <leader>jt :YcmCompleter GetType<CR>
		nnoremap <leader>jh :YcmCompleter GetParent<CR>

	endif
"}
"==========================================
" quickfix-search
"==========================================
" Stolen from Steve Losh vimrc: https://bitbucket.org/sjl/dotfiles/src/tip/vim/.vimrc
" Open a Quickfix window for the last search. similar to query search history: q/
" Ag/Ack for the last search.
nnoremap <silent> <leader>qa/ :execute "Ack! '" . substitute(substitute(substitute(@/, "\\\\<", "\\\\b", ""), "\\\\>", "\\\\b", ""), "\\\\v", "", "") . "'"<CR>

" Use common config for complex and simple vimrc{
    if filereadable(expand("~/.vimrc.common"))
       source ~/.vimrc.common
    endif
" }
