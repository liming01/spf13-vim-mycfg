"==========================================
" FileEncode Settings 文件编码,格式
"==========================================
" 自动判断编码时，依次尝试以下编码：
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set helplang=cn
"set langmenu=zh_CN.UTF-8
"set enc=2byte-gb18030
" 下面这句只影响普通模式 (非图形界面) 下的 Vim。
set termencoding=utf-8
set encoding=utf8
" 设置输入法在普通模式下无效
set noimdisable
autocmd! InsertLeave * set imdisable|set iminsert=0
autocmd! InsertEnter * set noimdisable|set iminsert=0
" Use Unix as the standard file type
set ffs=unix,dos,mac

" 如遇Unicode值大于255的文本，不必等到空格再折行。
set formatoptions+=m
" 合并两行中文时，不在中间加空格：
set formatoptions+=B

"设置 退出vim后，内容显示在终端屏幕, 可以用于查看和复制
"好处：误删什么的，如果以前屏幕打开，可以找回
"set t_ti= t_te=

" 00x增减数字时使用十进制
set nrformats=

" disable bracketed paste mode in iterm2
function! XTermPasteBegin(ret)
  set pastetoggle=<f29>
  set paste
  return a:ret
endfunction

execute "set <f28>=\<Esc>[200~"
execute "set <f29>=\<Esc>[201~"
map <expr> <f28> XTermPasteBegin("i")
imap <expr> <f28> XTermPasteBegin("")
vmap <expr> <f28> XTermPasteBegin("c")
cmap <f28> <nop>
cmap <f29> <nop>

set nospell
" not set autochdir, use ,cd when you want to change PWD
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>

" NOT to use spaces instead of tabs
set noexpandtab

" Be smart when using tabs ;)
set smarttab


"Always show current position
set ruler
" show location of cursor using a horizontal line.
set cursorline

set magic                       " For regular expressions turn magic on
set title                       " change the terminal's title
" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch
set incsearch                   " do incremental searching, search as you type
" Show matching brackets when text indicator is over them
set showmatch


"if $TMUX==''
"  " In tmux session, system clipboard didn't work; only enable it when not in tmux
"  if has('unnamedplus')
"    " By default, Vim will not use the system clipboard when yanking/pasting to
"    " the default register. This option makes Vim use the system default
"    " clipboard.
"    " Note that on X11, there are _two_ system clipboards: the "standard" one, and
"    " the selection/mouse-middle-click one. Vim sees the standard one as register
"    " '+' (and this option makes Vim use it by default) and the selection one as
"    " '*'.
"    " See :h 'clipboard' for details.
"    set clipboard=unnamedplus,unnamed
"  else
"    " Vim now also uses the selection system clipboard for default yank/paste.
"    set clipboard+=unnamed
"  endif
"else
"    set clipboard-=unnamed
"    set clipboard-=unnamedplus
"endif

" turn on syntax hightlighting.
syntax on

" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
else
	" 设置标记一列的背景颜色和数字一行颜色一致
	hi! link SignColumn   LineNr
	hi! link ShowMarksHLl DiffAdd
	hi! link ShowMarksHLu DiffChange

	" for error highlight，防止错误整行标红导致看不清
	highlight clear SpellBad
	highlight SpellBad term=standout ctermfg=1 term=underline cterm=underline
	highlight clear SpellCap
	highlight SpellCap term=underline cterm=underline
	highlight clear SpellRare
	highlight SpellRare term=underline cterm=underline
	highlight clear SpellLocal
	highlight SpellLocal term=underline cterm=underline
endif

" quickfix window  s/v to open in split window,  ,gd/,jd => quickfix window => open it
autocmd BufReadPost quickfix nnoremap <buffer> v <C-w><Enter><C-w>L
autocmd BufReadPost quickfix nnoremap <buffer> s <C-w><Enter><C-w>K

" 打开自动定位到最后编辑的位置, 需要确认 .viminfo 当前用户可写
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"离开插入模式后自动关闭预览窗口
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
"回车即选中当前项
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"

"上下左右键的行为 会显示其他信息
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

" Ignore compiled files
set wildignore=*.o,*~,*.pyc,*.swp,*.bak,*.class,
if has("win16") || has("win32")
    set wildignore+=.git\*,.hg\*,.svn\*
else
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

"show a navigable menu for tab completion
set completeopt=longest,menu
set wildmenu

" Make wildmenu behave like bash completion. Finding commands are so easy now.
set wildmode=list:longest,full


" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Set to auto read when a file is changed from the outside
set autoread

set mouse=v
" select & complete
set selection=inclusive
set selectmode=mouse,key

" "Reselect visual block after indent/outdent.调整缩进后自动选中，方便再次操作
vnoremap < <gv
vnoremap > >gv

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 1 tab == 4 spaces
set autoindent smartindent shiftround
set shiftwidth=4
set tabstop=4

" Linebreak on 500 characters
set lbr
set tw=500

" 设置最大列数的颜色提示
let &colorcolumn="80,".join(range(120,999),",")
highlight ColorColumn ctermbg=0 guibg=lightgrey

" movement
set scrolloff=7                 " keep 3 lines when scrolling

set wrap "Wrap lines

" ================ 行号 ============================
" 相对行号      行号变成相对，可以用 nj  nk   进行跳转 5j   5k 上下跳5行
" if v:version >= 703
" set relativenumber number
" au FocusLost * :set norelativenumber number
" au FocusGained * :set relativenumber
" " 插入模式下用绝对行号, 普通模式下用相对
" autocmd InsertEnter * :set norelativenumber number
" autocmd InsertLeave * :set relativenumber
" function! NumberToggle()
"     if(&relativenumber == 1)
"         set norelativenumber number
"     else
"         set relativenumber
"     endif
" endfunc
" nnoremap <leader>on: call NumberToggle()<cr>

""为方便复制，用于开启/关闭行号显示:
" function! HideNumber()
"   if(&relativenumber == &number)
"     set relativenumber! number!
"   elseif(&number)
"     set number!
"   else
"     set relativenumber!
"   endif
"   set number?
" endfunc
" nnoremap <leader>hn :call HideNumber()<CR>
" endif

" number the lines.
set number

nnoremap <leader>on :set nu! nu?<CR>
nnoremap <leader>oh :set hlsearch! hlsearch?<CR> " remove highlight
nnoremap <leader>ol :set list! list?<CR>
nnoremap <leader>ow :set wrap! wrap?<CR>
nnoremap <leader>os :set spell! spell?<CR>
" ================ Search format ============================
" 进入搜索Use sane regexes"
nnoremap / /\v
vnoremap / /\v

"Keep search pattern at the center of the screen."
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz

" keep cursor in the middle of the screen while scrolling up and down.
"set scrolloff=999

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treat long lines as break lines (useful when moving around in them)
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j

map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" save
" :W sudo saves the file
" " (useful for handling the permission-denied error)
"command W w !sudo tee % > /dev/null
cmap w!! w !sudo tee >/dev/null %

" command mode, ctrl-a to head， ctrl-e to tail
cnoremap <C-j> <t_kd>
cnoremap <C-k> <t_ku>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
inoremap <c-a> <esc>I
inoremap <c-e> <esc>A

" Map ; to : and save a million keystrokes
" ex mode commands made easy 用于快速进入命令行
nnoremap ; :

" Make 0 go to the first character rather than the beginning
" of the line. When we're programming, we're almost always
" interested in working with text rather than empty space. If
" you want the traditional beginning of line, use ^
nnoremap 0 ^
nnoremap ^ 0

" Quickly edit/reload the vimrc file
nnoremap <silent> <leader>ev :e  $MYVIMRC<CR>
nnoremap <silent> <leader>sv :so $MYVIMRC<CR>

" ============================ specific file type ===========================

autocmd FileType python set tabstop=4 shiftwidth=4 expandtab ai
autocmd FileType ruby set tabstop=2 shiftwidth=2 softtabstop=2 expandtab ai
autocmd BufRead,BufNew *.md,*.mkd,*.markdown  set filetype=markdown.mkd

" 定义函数AutoSetFileHead，自动插入文件头
autocmd BufNewFile *.sh,*.py exec ":call AutoSetFileHead()"
function! AutoSetFileHead()
    "如果文件类型为.sh文件
    if &filetype == 'sh'
        call setline(1, "\#!/bin/bash")
    endif

    "如果文件类型为python
    if &filetype == 'python'
        call setline(1, "\#!/usr/bin/env python")
        call append(1, "\# encoding: utf-8")
    endif

    normal G
    normal o
    normal o
endfunc

" keymap to run python script
nnoremap <buffer> <lead>rp :exec '!python' shellescape(@%, 1)<cr>


"====================================================================================
" Search in visual model: searching for the whole
" selection instead of just the word under the cursor.
"====================================================================================
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.' . a:extra_filter)
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>
" When you press <leader>vr you can search and replace the selected text
vnoremap <silent> <leader>vr :call VisualSelection('replace', '')<CR>

"==========================================
" Automatically jump to a file at the correct line number
"==========================================
" i.e. if your cursor is over /some/path.rb:50 then using 'gF' on it will take
" you to that line

" use ,gf to go to file in a vertical split
nnoremap <silent> <leader>gf   :vertical botright wincmd f<CR>

" use to jump to tag definition in a vertical split, similar to horizon split: <C-w>]
"nnoremap <silent> <leader>w] :vsp <CR>: wincmd h <CR>: exec("tag ".expand("<cword>"))<CR>
"nnoremap <silent> <leader>t] :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
nnoremap <silent> <leader>w] :vertical botright wincmd ]<CR>
nnoremap <silent> <leader>t] :tab wincmd ]<CR>

" copy current filename into system clipboard - mnemonic: (c)urrent(f)ilename
" this is helpful to paste someone the path you're looking at
nnoremap <silent> ,cf :let @* = expand("%:~")<CR>
nnoremap <silent> ,cr :let @* = expand("%")<CR>
nnoremap <silent> ,cn :let @* = expand("%:t")<CR>

" http://stackoverflow.com/questions/13194428/is-better-way-to-zoom-windows-in-vim-than-zoomwin
" Zoom / Restore window.
function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> <Leader>z :ZoomToggle<CR>

"==========================================
" quickfix-search
"==========================================
" Stolen from Steve Losh vimrc: https://bitbucket.org/sjl/dotfiles/src/tip/vim/.vimrc
" Open a Quickfix window for the last search. similar to query search history: q/
nnoremap <silent> <leader>q/ :execute 'vimgrep /'.@/.'/g %'<CR>:copen<CR>

"==========================================
" Use Q to intelligently close a window
"==========================================
" (if there are multiple windows into the same buffer)
" or kill the buffer entirely if it's the last window looking into that buffer
function! CloseWindowOrKillBuffer()
    let number_of_windows_to_this_buffer = len(filter(range(1, winnr('$')), "winbufnr(v:val) == bufnr('%')"))

    " We should never bdelete a nerd tree
    if matchstr(expand("%"), 'NERD') == 'NERD'
        wincmd c
        return
    endif

    " Don't need to save temp file for ListLeaders()
    if matchstr(expand("%"), '\[List Map\]') == '[List Map]'
        bdelete!
        return
    endif

    " Command Line windows can not be :wincmd c or : bdelete
    if matchstr(expand("%"), '\[Command Line\]') == '[Command Line]'
        quit!
        return
    endif

    if number_of_windows_to_this_buffer > 1
        wincmd c
    else
        bdelete
    endif
endfunction

nnoremap <silent> Q :call CloseWindowOrKillBuffer()<CR>

"==========================================
" better tracking my usage of the <leader> namespace for my key mappings
"==========================================
function! ListMap()
    silent! redir @a
    silent! map
    silent! redir END
    silent! new [List Map]
    silent! put! a
    silent! g/^s*$/d
	"silent! %s/^.*,/,/
    silent! normal ggVG
    silent! sort
    silent! let lines = getline(1,"$")
    silent! normal ESC
endfunction
nnoremap <silent> <leader>lm :call ListMap()<CR>

"==========================================
" Trip trailing whitespace
"==========================================
fun! <SID>StripTrailingWhitespaces()
	let l = line(".")
	let c = col(".")
	%s/\s\+$//e
	call cursor(l, c)
endfun
" autocmd FileType c,cpp,java,go,php,javascript,puppet,python,rust,twig,xml,yml,perl autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()
nnoremap <leader>t<space> : call <SID>StripTrailingWhitespaces() <CR>
